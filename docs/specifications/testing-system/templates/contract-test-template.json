{
  "$schema": "../schemas/current-test-task.schema.json",
  "schemaVersion": "2.0.0",
  "metadata": {
    "projectName": "{{PROJECT_NAME}}",
    "sprintId": "{{SPRINT_ID}}",
    "taskId": "{{TASK_ID}}",
    "taskTitle": "{{TASK_TITLE}}",
    "generatedAt": "{{GENERATED_AT}}",
    "generatedBy": "CODOR Template Generator",
    "description": "Auto-generated from contract-test-template.json",
    "references": []
  },
  "globalConfiguration": {
    "workspaceRoot": "${WORKSPACE_ROOT}",
    "evidenceDirectory": "evidence",
    "devServer": {
      "command": "npm run dev",
      "workingDirectory": "${WORKSPACE_ROOT}/packages/web",
      "port": 3000,
      "healthCheckUrl": "{{BASE_URL}}/api/health",
      "startupTimeout": 30000
    },
    "environment": {
      "NODE_ENV": "test",
      "API_BASE_URL": "{{BASE_URL}}"
    },
    "timeout": "{{GLOBAL_TIMEOUT}}",
    "validationPolicy": {
      "linting": {
        "strategy": "{{ESLINT_STRATEGY}}",
        "tools": {
          "eslint": {
            "enabled": true,
            "blockOn": "{{ESLINT_BLOCK_ON}}",
            "maxWarnings": "{{MAX_WARNINGS}}",
            "ignoredRules": "{{IGNORED_RULES}}",
            "errorOnRules": "{{ERROR_ON_RULES}}"
          }
        }
      },
      "typeChecking": {
        "strategy": "{{TYPESCRIPT_STRATEGY}}",
        "tools": {
          "typescript": {
            "enabled": true,
            "blockOn": "{{TYPESCRIPT_BLOCK_ON}}",
            "strictMode": "{{STRICT_MODE}}",
            "allowImplicitAny": false
          }
        }
      },
      "compilation": {
        "strategy": "BLOCK_ON_ERRORS_ALWAYS"
      }
    }
  },
  "executionEngine": {
    "availableActionTypes": [
      "TERMINAL_COMMAND",
      "HTTP_REQUEST",
      "FILE_VALIDATION"
    ],
    "executorConfigurations": {
      "terminalCommand": {
        "shell": "powershell",
        "timeout": 60000
      },
      "httpRequest": {
        "timeout": 10000
      }
    }
  },
  "tasks": {
    "{{TASK_ID}}": {
      "taskId": "{{TASK_ID}}",
      "title": "{{TASK_TITLE}}",
      "description": "{{TASK_DESCRIPTION}}",
      "priority": "{{PRIORITY}}",
      "dependencies": "{{DEPENDENCIES}}",

      "testExecution": {
        "prerequisites": [
          {
            "actionId": "PREREQ.1",
            "type": "FILE_VALIDATION",
            "description": "Verify contract test file exists",
            "parameters": {
              "filePath": "{{TEST_FILE_PATH}}",
              "validationType": "EXISTS"
            },
            "timeout": 5000,
            "continueOnFailure": false
          },
          {
            "actionId": "PREREQ.2",
            "type": "TERMINAL_COMMAND",
            "description": "Install dependencies",
            "parameters": {
              "command": "npm install",
              "workingDirectory": "{{WORKSPACE_ROOT}}/packages/web",
              "environment": {
                "NODE_ENV": "test"
              }
            },
            "timeout": 120000,
            "continueOnFailure": false
          },
          {
            "actionId": "PREREQ.3",
            "type": "TERMINAL_COMMAND",
            "description": "Start Next.js dev server",
            "parameters": {
              "command": "npm run dev",
              "workingDirectory": "{{WORKSPACE_ROOT}}/packages/web",
              "environment": {
                "NODE_ENV": "development",
                "PORT": "3000"
              }
            },
            "timeout": 30000,
            "continueOnFailure": false
          }
        ],

        "steps": [
          {
            "actionId": "STEP.1",
            "type": "FILE_VALIDATION",
            "description": "Verify TypeScript types are valid",
            "parameters": {
              "filePath": "{{TEST_FILE_PATH}}",
              "validationType": "CONTENT_MATCH"
            },
            "timeout": 5000,
            "continueOnFailure": false
          },
          {
            "actionId": "STEP.2",
            "type": "TERMINAL_COMMAND",
            "description": "TypeScript type check",
            "parameters": {
              "command": "npx tsc --noEmit --project tsconfig.json",
              "workingDirectory": "{{WORKSPACE_ROOT}}/packages/web"
            },
            "timeout": 60000,
            "continueOnFailure": false
          },
          {
            "actionId": "STEP.3",
            "type": "TERMINAL_COMMAND",
            "description": "ESLint validation",
            "parameters": {
              "command": "npx eslint {{TEST_FILE_PATH}}",
              "workingDirectory": "{{WORKSPACE_ROOT}}/packages/web"
            },
            "timeout": 30000,
            "continueOnFailure": false
          },
          {
            "actionId": "STEP.4",
            "type": "TERMINAL_COMMAND",
            "description": "Execute contract test suite",
            "parameters": {
              "command": "npm test -- {{TEST_FILE_PATH}} --verbose",
              "workingDirectory": "{{WORKSPACE_ROOT}}/packages/web",
              "environment": {
                "NODE_ENV": "test",
                "API_URL": "{{BASE_URL}}"
              }
            },
            "timeout": 60000,
            "continueOnFailure": true
          },
          {
            "actionId": "STEP.5",
            "type": "HTTP_REQUEST",
            "description": "Direct API validation: {{HTTP_METHOD}} {{API_ENDPOINT}}",
            "parameters": {
              "url": "{{BASE_URL}}{{API_ENDPOINT}}",
              "method": "{{HTTP_METHOD}}",
              "headers": {
                "Accept": "application/json"
              }
            },
            "timeout": 10000,
            "continueOnFailure": true
          },
          {
            "actionId": "STEP.6",
            "type": "HTTP_REQUEST",
            "description": "Test API with pagination parameters",
            "parameters": {
              "url": "{{BASE_URL}}{{API_ENDPOINT}}?page=1&pageSize=10",
              "method": "{{HTTP_METHOD}}",
              "headers": {
                "Accept": "application/json"
              }
            },
            "timeout": 10000,
            "continueOnFailure": true
          },
          {
            "actionId": "STEP.7",
            "type": "HTTP_REQUEST",
            "description": "Test API with invalid parameters",
            "parameters": {
              "url": "{{BASE_URL}}{{API_ENDPOINT}}?page=-1&pageSize=9999",
              "method": "{{HTTP_METHOD}}",
              "headers": {
                "Accept": "application/json"
              }
            },
            "timeout": 10000,
            "continueOnFailure": true
          },
          {
            "actionId": "STEP.8",
            "type": "TERMINAL_COMMAND",
            "description": "Generate test coverage report",
            "parameters": {
              "command": "npm test -- {{TEST_FILE_PATH}} --coverage --coverageReporters=json",
              "workingDirectory": "{{WORKSPACE_ROOT}}/packages/web"
            },
            "timeout": 60000,
            "continueOnFailure": true
          }
        ],

        "cleanup": [
          {
            "actionId": "CLEANUP.1",
            "type": "TERMINAL_COMMAND",
            "description": "Stop dev server",
            "parameters": {
              "command": "taskkill /F /FI \"WINDOWTITLE eq npm*\" /T",
              "workingDirectory": "{{WORKSPACE_ROOT}}/packages/web"
            },
            "timeout": 5000,
            "continueOnFailure": true
          },
          {
            "actionId": "CLEANUP.2",
            "type": "TERMINAL_COMMAND",
            "description": "Clear test cache",
            "parameters": {
              "command": "npm run test:clear-cache",
              "workingDirectory": "{{WORKSPACE_ROOT}}/packages/web"
            },
            "timeout": 10000,
            "continueOnFailure": true
          }
        ]
      },

      "validationCriteria": {
        "successConditions": [
          {
            "condition": "STEP.4.exitCode === 0 || STEP.4.exitCode === 1",
            "description": "Test suite executes successfully (TDD allows test failures)"
          },
          {
            "condition": "STEP.2.exitCode === 0",
            "description": "No TypeScript compilation errors"
          },
          {
            "condition": "STEP.3.errorCount === 0",
            "description": "No ESLint errors (per validation policy)"
          },
          {
            "condition": "STEP.5.statusCode >= 200 && STEP.5.statusCode < 500",
            "description": "API responds with valid HTTP status"
          }
        ],
        "failureConditions": [
          {
            "condition": "PREREQ.3.failed === true",
            "description": "Dev server failed to start (blocks execution)"
          },
          {
            "condition": "STEP.2.exitCode !== 0",
            "description": "TypeScript errors present (blocks execution per policy)"
          }
        ],
        "expectedOutput": {
          "stdoutContains": ["Test Suites:", "Tests:", "{{TEST_FILE_NAME}}"],
          "exitCode": 0
        }
      },

      "completionCriteria": {
        "allStepsMustPass": "{{ALL_STEPS_MUST_PASS}}",
        "minimumPassRate": "{{MINIMUM_PASS_RATE}}",
        "requiredEvidence": [
          "terminal-output",
          "test-execution-log",
          "api-responses"
        ],
        "taskStatusLock": true
      },

      "technicalDebtExpectations": {
        "likelyFailures": [
          {
            "scenario": "API endpoint not implemented (404 response)",
            "expectedDebtCategory": "API_ENDPOINT_MISSING",
            "expectedSeverity": "CRITICAL",
            "suggestedFix": "Implement {{HTTP_METHOD}} {{API_ENDPOINT}} endpoint with proper request/response handling"
          },
          {
            "scenario": "Incorrect response structure (contract violation)",
            "expectedDebtCategory": "INTEGRATION_FAILURE",
            "expectedSeverity": "HIGH",
            "suggestedFix": "Update API response to match contract specification"
          },
          {
            "scenario": "Missing input validation",
            "expectedDebtCategory": "VALIDATION_MISSING",
            "expectedSeverity": "MEDIUM",
            "suggestedFix": "Add input validation for request parameters with appropriate error responses"
          }
        ]
      }
    }
  }
}
