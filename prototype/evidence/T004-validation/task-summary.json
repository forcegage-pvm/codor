{
  "taskId": "T004-validation",
  "title": "Validate T004 Test Infrastructure",
  "startTime": "2025-09-30T12:30:19.936Z",
  "steps": [
    {
      "action": {
        "actionId": "PREREQ.1",
        "description": "Verify test-case directory exists",
        "type": "FILE_VALIDATION",
        "parameters": {
          "filePath": "test-case",
          "validationType": "EXISTS"
        }
      },
      "phase": "PREREQ",
      "taskId": "T004-validation",
      "startTime": "2025-09-30T12:30:19.937Z",
      "success": true,
      "data": {
        "filePath": "D:\\Dropbox\\Repositories\\Python\\codor\\test-case",
        "validationType": "EXISTS",
        "exists": true,
        "timestamp": "2025-09-30T12:30:19.937Z",
        "size": 0,
        "modified": "2025-09-29T19:41:24.699Z",
        "isDirectory": true
      },
      "error": null,
      "endTime": "2025-09-30T12:30:19.938Z",
      "durationMs": 1
    },
    {
      "action": {
        "actionId": "PREREQ.2",
        "description": "Verify packages/web exists",
        "type": "FILE_VALIDATION",
        "parameters": {
          "filePath": "test-case/packages/web",
          "validationType": "EXISTS"
        }
      },
      "phase": "PREREQ",
      "taskId": "T004-validation",
      "startTime": "2025-09-30T12:30:19.939Z",
      "success": true,
      "data": {
        "filePath": "D:\\Dropbox\\Repositories\\Python\\codor\\test-case\\packages\\web",
        "validationType": "EXISTS",
        "exists": true,
        "timestamp": "2025-09-30T12:30:19.939Z",
        "size": 0,
        "modified": "2025-09-29T20:06:20.254Z",
        "isDirectory": true
      },
      "error": null,
      "endTime": "2025-09-30T12:30:19.940Z",
      "durationMs": 1
    },
    {
      "action": {
        "actionId": "PREREQ.3",
        "description": "Verify package.json exists",
        "type": "FILE_VALIDATION",
        "parameters": {
          "filePath": "test-case/packages/web/package.json",
          "validationType": "JSON_VALID"
        }
      },
      "phase": "PREREQ",
      "taskId": "T004-validation",
      "startTime": "2025-09-30T12:30:19.941Z",
      "success": true,
      "data": {
        "filePath": "D:\\Dropbox\\Repositories\\Python\\codor\\test-case\\packages\\web\\package.json",
        "validationType": "JSON_VALID",
        "exists": true,
        "timestamp": "2025-09-30T12:30:19.941Z",
        "size": 2734,
        "modified": "2025-09-29T19:41:24.541Z",
        "isDirectory": false,
        "json": {
          "name": "web",
          "version": "0.1.0",
          "private": true,
          "scripts": {
            "dev": "next dev",
            "build": "next build",
            "start": "next start",
            "lint": "eslint",
            "lint:fix": "eslint --fix",
            "test": "jest",
            "test:watch": "jest --watch",
            "test:coverage": "jest --coverage",
            "test:ci": "jest --runInBand --coverage",
            "cy:open": "cypress open",
            "cy:run": "cypress run",
            "test:e2e": "npm run cy:run",
            "test:playwright": "playwright test",
            "storybook": "storybook dev -p 6006",
            "storybook:build": "storybook build",
            "analyze:quotes": "node scripts/analyze-quotes-bundle.js",
            "analyze:quotes:detailed": "node scripts/analyze-quotes-bundle.js --detailed",
            "analyze:quotes:json": "node scripts/analyze-quotes-bundle.js --json",
            "analyze:quotes:csv": "node scripts/analyze-quotes-bundle.js --csv"
          },
          "dependencies": {
            "@headlessui/react": "^2.2.0",
            "@heroicons/react": "^2.2.0",
            "@tanstack/react-query": "^5.66.0",
            "@tanstack/react-virtual": "^3.11.2",
            "@types/nodemailer": "^7.0.1",
            "@types/pdfkit": "^0.17.3",
            "express-rate-limit": "^8.1.0",
            "lucide-react": "^0.544.0",
            "next": "15.5.4",
            "nodemailer": "^7.0.6",
            "pdfkit": "^0.17.2",
            "react": "19.1.0",
            "react-dom": "19.1.0",
            "sonner": "^1.7.3",
            "tailwindcss-animate": "^1.0.7"
          },
          "devDependencies": {
            "@babel/preset-typescript": "^7.27.1",
            "@eslint/eslintrc": "^3",
            "@playwright/test": "^1.51.1",
            "@storybook/addon-essentials": "^8.6.14",
            "@storybook/addon-interactions": "^8.6.14",
            "@storybook/addon-links": "^8.6.14",
            "@storybook/nextjs": "^8.6.14",
            "@storybook/react": "^8.6.14",
            "@storybook/react-webpack5": "^8.6.14",
            "@storybook/testing-library": "^0.2.2",
            "@tailwindcss/postcss": "^4",
            "@testing-library/cypress": "^10.0.1",
            "@testing-library/dom": "^10.4.1",
            "@testing-library/jest-dom": "^6.8.0",
            "@testing-library/react": "^16.3.0",
            "@types/jest": "^30.0.0",
            "@types/node": "^20",
            "@types/node-fetch": "^2.6.13",
            "@types/react": "^19",
            "@types/react-dom": "^19",
            "axe-core": "^4.10.3",
            "babel-loader": "^9.2.1",
            "cypress": "^13.12.0",
            "eslint": "^9",
            "eslint-config-next": "15.5.4",
            "fast-check": "^4.3.0",
            "jest": "^30.1.3",
            "jest-axe": "^10.0.0",
            "jest-environment-jsdom": "^30.1.2",
            "node-fetch": "^3.3.2",
            "swc-loader": "^0.2.6",
            "tailwindcss": "^4",
            "ts-jest": "^29.4.4",
            "ts-loader": "^9.5.4",
            "tsconfig-paths-webpack-plugin": "^4.1.0",
            "typescript": "^5",
            "undici": "^7.16.0",
            "zod": "^4.1.11"
          }
        },
        "isValidJSON": true
      },
      "error": null,
      "endTime": "2025-09-30T12:30:19.941Z",
      "durationMs": 0
    },
    {
      "action": {
        "actionId": "STEP.1",
        "description": "Check if Node modules exist",
        "type": "TERMINAL_COMMAND",
        "parameters": {
          "command": "Test-Path 'test-case\\packages\\web\\node_modules'"
        }
      },
      "phase": "STEP",
      "taskId": "T004-validation",
      "startTime": "2025-09-30T12:30:19.943Z",
      "success": true,
      "data": {
        "command": "Test-Path 'test-case\\packages\\web\\node_modules'",
        "workingDirectory": "D:/Dropbox/Repositories/Python/codor",
        "exitCode": 0,
        "stdout": "True\r\n",
        "stderr": "",
        "expectedExitCodes": [
          0
        ],
        "timestamp": "2025-09-30T12:30:20.241Z"
      },
      "error": null,
      "endTime": "2025-09-30T12:30:20.241Z",
      "durationMs": 298
    },
    {
      "action": {
        "actionId": "STEP.2",
        "description": "Verify T004 specification exists",
        "type": "FILE_VALIDATION",
        "parameters": {
          "filePath": "docs/specifications/testing-system/examples/T004-quotes-get-test-specification.json",
          "validationType": "JSON_VALID"
        }
      },
      "phase": "STEP",
      "taskId": "T004-validation",
      "startTime": "2025-09-30T12:30:20.242Z",
      "success": true,
      "data": {
        "filePath": "D:\\Dropbox\\Repositories\\Python\\codor\\docs\\specifications\\testing-system\\examples\\T004-quotes-get-test-specification.json",
        "validationType": "JSON_VALID",
        "exists": true,
        "timestamp": "2025-09-30T12:30:20.243Z",
        "size": 13339,
        "modified": "2025-09-30T08:49:22.086Z",
        "isDirectory": false,
        "json": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "schemaVersion": "2.0.0",
          "metadata": {
            "projectName": "CODOR-QuotesWorkspace",
            "sprintId": "SPRINT_006",
            "taskId": "T004",
            "taskTitle": "Contract Test GET /api/quotes",
            "generatedAt": "2025-09-30T16:00:00.000Z",
            "generatedBy": "GitHub Copilot",
            "description": "Comprehensive test specification for T004: Contract test GET /api/quotes endpoint with TDD validation and MCP browser verification",
            "references": {
              "taskPlan": "test-case/specs/006-quotes-technical-debt/tasks.md#T004",
              "testPlan": "test-case/specs/006-quotes-technical-debt/task-test-plan.md#T004",
              "apiContract": "test-case/specs/006-quotes-technical-debt/contracts/api-contracts.md#get-quote-list"
            }
          },
          "globalConfiguration": {
            "workspaceRoot": "D:/Dropbox/Repositories/Python/codor/test-case",
            "evidenceDirectory": "evidence",
            "devServer": {
              "command": "npm run dev",
              "workingDirectory": "D:/Dropbox/Repositories/Python/codor/test-case/packages/web",
              "healthCheckUrl": "http://localhost:3000/api/health",
              "startupTimeout": 30000,
              "port": 3000
            },
            "environment": {
              "NODE_ENV": "test",
              "API_BASE_URL": "http://localhost:3000",
              "LOG_LEVEL": "info"
            },
            "timeout": 300000,
            "validationPolicy": {
              "linting": {
                "strategy": "BLOCK_ON_ERRORS_ONLY",
                "tools": {
                  "eslint": {
                    "enabled": true,
                    "blockOn": "ERRORS_ONLY",
                    "treatWarningsAsErrors": false,
                    "maxWarnings": 20,
                    "ignoredRules": [
                      "no-console"
                    ],
                    "errorOnRules": [
                      "no-unused-vars",
                      "@typescript-eslint/no-unused-vars"
                    ]
                  }
                }
              },
              "typeChecking": {
                "strategy": "BLOCK_ON_ERRORS_ALWAYS",
                "tools": {
                  "typescript": {
                    "enabled": true,
                    "blockOn": "ERRORS_ALWAYS",
                    "strictMode": true,
                    "allowImplicitAny": false
                  }
                }
              },
              "compilation": {
                "strategy": "BLOCK_ON_ERRORS_ALWAYS"
              }
            }
          },
          "executionEngine": {
            "availableActionTypes": [
              "TERMINAL_COMMAND",
              "HTTP_REQUEST",
              "FILE_VALIDATION"
            ],
            "executorConfigurations": {
              "TERMINAL_COMMAND": {
                "defaultShell": "powershell",
                "defaultTimeout": 60000
              },
              "HTTP_REQUEST": {
                "defaultTimeout": 10000,
                "followRedirects": true,
                "validateSSL": true
              }
            }
          },
          "tasks": {
            "T004": {
              "taskId": "T004",
              "title": "Contract Test GET /api/quotes",
              "description": "Execute contract tests for GET /api/quotes endpoint and validate API responses. This task validates the quote list endpoint implementation against the API contract specification, including response structure, pagination, filtering, and error handling. Expected to be in TDD red phase initially.",
              "priority": "HIGH",
              "dependencies": [],
              "testExecution": {
                "prerequisites": [
                  {
                    "actionId": "PREREQ.1",
                    "type": "FILE_VALIDATION",
                    "description": "Verify contract test file exists",
                    "parameters": {
                      "filePath": "packages/web/__tests__/contracts/quotes-get.test.ts",
                      "validationType": "EXISTS"
                    },
                    "timeout": 5000,
                    "continueOnFailure": false
                  },
                  {
                    "actionId": "PREREQ.2",
                    "type": "TERMINAL_COMMAND",
                    "description": "Install dependencies",
                    "parameters": {
                      "command": "npm install",
                      "workingDirectory": "D:/Dropbox/Repositories/Python/codor/test-case/packages/web",
                      "environment": {
                        "NODE_ENV": "test"
                      }
                    },
                    "timeout": 120000,
                    "continueOnFailure": false
                  },
                  {
                    "actionId": "PREREQ.3",
                    "type": "TERMINAL_COMMAND",
                    "description": "Start Next.js dev server",
                    "parameters": {
                      "command": "npm run dev",
                      "workingDirectory": "D:/Dropbox/Repositories/Python/codor/test-case/packages/web",
                      "environment": {
                        "NODE_ENV": "development",
                        "PORT": "3000"
                      }
                    },
                    "timeout": 30000,
                    "continueOnFailure": false
                  }
                ],
                "steps": [
                  {
                    "actionId": "STEP.1",
                    "type": "FILE_VALIDATION",
                    "description": "Verify TypeScript types are valid",
                    "parameters": {
                      "filePath": "packages/web/__tests__/contracts/quotes-get.test.ts",
                      "validationType": "CONTENT_MATCH"
                    },
                    "timeout": 5000,
                    "continueOnFailure": false
                  },
                  {
                    "actionId": "STEP.2",
                    "type": "TERMINAL_COMMAND",
                    "description": "TypeScript type check",
                    "parameters": {
                      "command": "npx tsc --noEmit --project tsconfig.json",
                      "workingDirectory": "D:/Dropbox/Repositories/Python/codor/test-case/packages/web"
                    },
                    "timeout": 60000,
                    "continueOnFailure": false
                  },
                  {
                    "actionId": "STEP.3",
                    "type": "TERMINAL_COMMAND",
                    "description": "ESLint validation",
                    "parameters": {
                      "command": "npx eslint __tests__/contracts/quotes-get.test.ts",
                      "workingDirectory": "D:/Dropbox/Repositories/Python/codor/test-case/packages/web"
                    },
                    "timeout": 30000,
                    "continueOnFailure": false
                  },
                  {
                    "actionId": "STEP.4",
                    "type": "TERMINAL_COMMAND",
                    "description": "Execute contract test suite (T004.1)",
                    "parameters": {
                      "command": "npm test -- __tests__/contracts/quotes-get.test.ts --verbose",
                      "workingDirectory": "D:/Dropbox/Repositories/Python/codor/test-case/packages/web",
                      "environment": {
                        "NODE_ENV": "test",
                        "API_URL": "http://localhost:3000"
                      }
                    },
                    "timeout": 60000,
                    "continueOnFailure": true
                  },
                  {
                    "actionId": "STEP.5",
                    "type": "HTTP_REQUEST",
                    "description": "Direct API validation: GET /api/v1/quotes",
                    "parameters": {
                      "url": "http://localhost:3000/api/v1/quotes",
                      "method": "GET",
                      "headers": {
                        "Accept": "application/json"
                      }
                    },
                    "timeout": 10000,
                    "continueOnFailure": true
                  },
                  {
                    "actionId": "STEP.6",
                    "type": "HTTP_REQUEST",
                    "description": "Test API pagination parameters",
                    "parameters": {
                      "url": "http://localhost:3000/api/v1/quotes?page=1&pageSize=10",
                      "method": "GET",
                      "headers": {
                        "Accept": "application/json"
                      }
                    },
                    "timeout": 10000,
                    "continueOnFailure": true
                  },
                  {
                    "actionId": "STEP.7",
                    "type": "HTTP_REQUEST",
                    "description": "Test API with invalid parameters",
                    "parameters": {
                      "url": "http://localhost:3000/api/v1/quotes?page=-1&pageSize=9999",
                      "method": "GET",
                      "headers": {
                        "Accept": "application/json"
                      }
                    },
                    "timeout": 10000,
                    "continueOnFailure": true
                  },
                  {
                    "actionId": "STEP.8",
                    "type": "HTTP_REQUEST",
                    "description": "Test API filters",
                    "parameters": {
                      "url": "http://localhost:3000/api/v1/quotes?filters[status]=DRAFT",
                      "method": "GET",
                      "headers": {
                        "Accept": "application/json"
                      }
                    },
                    "timeout": 10000,
                    "continueOnFailure": true
                  },
                  {
                    "actionId": "STEP.9",
                    "type": "HTTP_REQUEST",
                    "description": "Test API sorting",
                    "parameters": {
                      "url": "http://localhost:3000/api/v1/quotes?sortBy=createdAt&sortDirection=desc",
                      "method": "GET",
                      "headers": {
                        "Accept": "application/json"
                      }
                    },
                    "timeout": 10000,
                    "continueOnFailure": true
                  },
                  {
                    "actionId": "STEP.10",
                    "type": "TERMINAL_COMMAND",
                    "description": "Generate test coverage report",
                    "parameters": {
                      "command": "npm test -- __tests__/contracts/quotes-get.test.ts --coverage --coverageReporters=json",
                      "workingDirectory": "D:/Dropbox/Repositories/Python/codor/test-case/packages/web"
                    },
                    "timeout": 60000,
                    "continueOnFailure": true
                  }
                ],
                "cleanup": [
                  {
                    "actionId": "CLEANUP.1",
                    "type": "TERMINAL_COMMAND",
                    "description": "Stop dev server",
                    "parameters": {
                      "command": "taskkill /F /FI \"WINDOWTITLE eq npm*\" /T",
                      "workingDirectory": "D:/Dropbox/Repositories/Python/codor/test-case/packages/web"
                    },
                    "timeout": 5000,
                    "continueOnFailure": true
                  },
                  {
                    "actionId": "CLEANUP.2",
                    "type": "TERMINAL_COMMAND",
                    "description": "Clear test cache",
                    "parameters": {
                      "command": "npm run test:clear-cache",
                      "workingDirectory": "D:/Dropbox/Repositories/Python/codor/test-case/packages/web"
                    },
                    "timeout": 10000,
                    "continueOnFailure": true
                  }
                ]
              },
              "validationCriteria": {
                "successConditions": [
                  {
                    "condition": "STEP.4.exitCode === 0 || STEP.4.exitCode === 1",
                    "description": "Test suite executes successfully (TDD allows test failures)"
                  },
                  {
                    "condition": "STEP.2.exitCode === 0",
                    "description": "No TypeScript compilation errors"
                  },
                  {
                    "condition": "STEP.3.errorCount === 0",
                    "description": "No ESLint errors (per validation policy BLOCK_ON_ERRORS_ONLY)"
                  },
                  {
                    "condition": "STEP.5.statusCode >= 200 && STEP.5.statusCode < 500",
                    "description": "API responds with valid HTTP status"
                  }
                ],
                "failureConditions": [
                  {
                    "condition": "PREREQ.3.failed === true",
                    "description": "Dev server failed to start (blocks execution)"
                  },
                  {
                    "condition": "STEP.2.exitCode !== 0",
                    "description": "TypeScript errors present (blocks execution per BLOCK_ON_ERRORS_ALWAYS)"
                  }
                ],
                "expectedOutput": {
                  "stdoutContains": [
                    "Test Suites:",
                    "Tests:",
                    "quotes-get.test.ts"
                  ],
                  "exitCode": 0
                }
              },
              "completionCriteria": {
                "allStepsMustPass": false,
                "minimumPassRate": 60,
                "requiredEvidence": [
                  "terminal-output",
                  "test-execution-log",
                  "api-responses"
                ],
                "taskStatusLock": true
              },
              "technicalDebtExpectations": {
                "likelyFailures": [
                  {
                    "scenario": "API endpoint not implemented (404 response)",
                    "expectedDebtCategory": "API_ENDPOINT_MISSING",
                    "expectedSeverity": "CRITICAL",
                    "suggestedFix": "Implement GET /api/v1/quotes endpoint with pagination, filtering, and sorting support"
                  },
                  {
                    "scenario": "Incorrect response structure (contract violation)",
                    "expectedDebtCategory": "INTEGRATION_FAILURE",
                    "expectedSeverity": "HIGH",
                    "suggestedFix": "Update API response to match contract specification with quotes array, pagination object, and appliedFilters"
                  },
                  {
                    "scenario": "Missing pagination support",
                    "expectedDebtCategory": "VALIDATION_MISSING",
                    "expectedSeverity": "MEDIUM",
                    "suggestedFix": "Add pagination logic to API endpoint with page, pageSize, totalCount, hasMore, and nextCursor"
                  },
                  {
                    "scenario": "Missing input validation",
                    "expectedDebtCategory": "VALIDATION_MISSING",
                    "expectedSeverity": "MEDIUM",
                    "suggestedFix": "Add validation for page, pageSize, filters, and sortBy parameters with appropriate error responses"
                  }
                ]
              }
            }
          }
        },
        "isValidJSON": true
      },
      "error": null,
      "endTime": "2025-09-30T12:30:20.243Z",
      "durationMs": 1
    },
    {
      "action": {
        "actionId": "STEP.3",
        "description": "Count total test specifications",
        "type": "TERMINAL_COMMAND",
        "parameters": {
          "command": "Get-ChildItem -Path 'docs\\specifications\\testing-system\\examples' -Filter 'T*.json' | Measure-Object | Select-Object -ExpandProperty Count"
        }
      },
      "phase": "STEP",
      "taskId": "T004-validation",
      "startTime": "2025-09-30T12:30:20.244Z",
      "success": true,
      "data": {
        "command": "Get-ChildItem -Path 'docs\\specifications\\testing-system\\examples' -Filter 'T*.json' | Measure-Object | Select-Object -ExpandProperty Count",
        "workingDirectory": "D:/Dropbox/Repositories/Python/codor",
        "exitCode": 0,
        "stdout": "16\r\n",
        "stderr": "",
        "expectedExitCodes": [
          0
        ],
        "timestamp": "2025-09-30T12:30:20.559Z"
      },
      "error": null,
      "endTime": "2025-09-30T12:30:20.559Z",
      "durationMs": 315
    },
    {
      "action": {
        "actionId": "STEP.4",
        "description": "Verify schema file exists",
        "type": "FILE_VALIDATION",
        "parameters": {
          "filePath": "docs/specifications/testing-system/schemas/current-test-task.schema.json",
          "validationType": "JSON_VALID"
        }
      },
      "phase": "STEP",
      "taskId": "T004-validation",
      "startTime": "2025-09-30T12:30:20.560Z",
      "success": true,
      "data": {
        "filePath": "D:\\Dropbox\\Repositories\\Python\\codor\\docs\\specifications\\testing-system\\schemas\\current-test-task.schema.json",
        "validationType": "JSON_VALID",
        "exists": true,
        "timestamp": "2025-09-30T12:30:20.560Z",
        "size": 37891,
        "modified": "2025-09-30T08:49:22.095Z",
        "isDirectory": false,
        "json": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "$id": "https://codor.dev/schemas/test-task-specification.v2.0.json",
          "title": "CODOR Test Task Specification Schema v2.0.0",
          "description": "Authoritative schema for agent-generated test task specifications (v2.0.0, updated 2025-09-30). This schema enforces compliance with the Script-Based Testing Framework and ensures all test tasks are executable by the script-execution-engine without agent involvement.",
          "type": "object",
          "required": [
            "schemaVersion",
            "metadata",
            "globalConfiguration",
            "executionEngine",
            "tasks"
          ],
          "properties": {
            "schemaVersion": {
              "type": "string",
              "const": "2.0.0",
              "description": "Schema version - must be 2.0.0"
            },
            "metadata": {
              "type": "object",
              "required": [
                "projectName",
                "sprintId",
                "generatedAt",
                "generatedBy"
              ],
              "properties": {
                "projectName": {
                  "type": "string",
                  "description": "Name of the project/workspace"
                },
                "sprintId": {
                  "type": "string",
                  "pattern": "^[A-Z0-9_-]+$",
                  "description": "Sprint identifier (e.g., 'SPRINT_006')"
                },
                "generatedAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "ISO 8601 timestamp when specification was generated"
                },
                "generatedBy": {
                  "type": "string",
                  "description": "Agent or system that generated this specification"
                },
                "description": {
                  "type": "string",
                  "description": "High-level description of what this test suite validates"
                }
              }
            },
            "globalConfiguration": {
              "type": "object",
              "required": [
                "workspaceRoot",
                "evidenceDirectory"
              ],
              "properties": {
                "workspaceRoot": {
                  "type": "string",
                  "description": "Absolute path to workspace root directory"
                },
                "evidenceDirectory": {
                  "type": "string",
                  "default": "evidence",
                  "description": "Directory where evidence will be collected (relative to workspace root)"
                },
                "devServer": {
                  "type": "object",
                  "description": "Development server configuration if required for tests",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "Command to start dev server (e.g., 'npm run dev')"
                    },
                    "workingDirectory": {
                      "type": "string",
                      "description": "Absolute path where dev server command should run"
                    },
                    "healthCheckUrl": {
                      "type": "string",
                      "format": "uri",
                      "description": "URL to check if server is ready"
                    },
                    "startupTimeout": {
                      "type": "integer",
                      "default": 30000,
                      "description": "Maximum time to wait for server startup (milliseconds)"
                    },
                    "port": {
                      "type": "integer",
                      "minimum": 1024,
                      "maximum": 65535,
                      "description": "Port the dev server listens on"
                    }
                  }
                },
                "environment": {
                  "type": "object",
                  "description": "Global environment variables for all test executions",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "timeout": {
                  "type": "integer",
                  "default": 300000,
                  "description": "Global timeout for entire test suite execution (milliseconds)"
                },
                "validationPolicy": {
                  "type": "object",
                  "description": "Configurable policies for validation tool failures (linting, type checking, etc.)",
                  "properties": {
                    "linting": {
                      "type": "object",
                      "description": "Linting validation policy",
                      "properties": {
                        "strategy": {
                          "type": "string",
                          "enum": [
                            "BLOCK_ON_ERRORS_ALWAYS",
                            "BLOCK_ON_ERRORS_ONLY",
                            "BLOCK_ON_ERRORS_AND_WARNINGS",
                            "WARN_ONLY",
                            "NEVER"
                          ],
                          "default": "BLOCK_ON_ERRORS_ONLY",
                          "description": "Overall linting blocking strategy"
                        },
                        "tools": {
                          "type": "object",
                          "description": "Per-tool linting configuration",
                          "properties": {
                            "eslint": {
                              "$ref": "#/definitions/LintToolPolicy"
                            },
                            "prettier": {
                              "$ref": "#/definitions/LintToolPolicy"
                            },
                            "pylint": {
                              "$ref": "#/definitions/LintToolPolicy"
                            },
                            "flake8": {
                              "$ref": "#/definitions/LintToolPolicy"
                            }
                          }
                        }
                      }
                    },
                    "typeChecking": {
                      "type": "object",
                      "description": "Type checking validation policy",
                      "properties": {
                        "strategy": {
                          "type": "string",
                          "enum": [
                            "BLOCK_ON_ERRORS_ALWAYS",
                            "BLOCK_ON_ERRORS_ONLY",
                            "WARN_ONLY",
                            "NEVER"
                          ],
                          "default": "BLOCK_ON_ERRORS_ALWAYS",
                          "description": "Type checking blocking strategy"
                        },
                        "tools": {
                          "type": "object",
                          "description": "Per-tool type checking configuration",
                          "properties": {
                            "typescript": {
                              "$ref": "#/definitions/TypeCheckToolPolicy"
                            },
                            "mypy": {
                              "$ref": "#/definitions/TypeCheckToolPolicy"
                            }
                          }
                        }
                      }
                    },
                    "compilation": {
                      "type": "object",
                      "description": "Compilation validation policy",
                      "properties": {
                        "strategy": {
                          "type": "string",
                          "enum": [
                            "BLOCK_ON_ERRORS_ALWAYS",
                            "NEVER"
                          ],
                          "default": "BLOCK_ON_ERRORS_ALWAYS",
                          "description": "Compilation errors always block"
                        }
                      }
                    }
                  }
                }
              }
            },
            "executionEngine": {
              "type": "object",
              "required": [
                "availableActionTypes"
              ],
              "properties": {
                "availableActionTypes": {
                  "type": "array",
                  "description": "Action types available in this test suite",
                  "items": {
                    "type": "string",
                    "enum": [
                      "TERMINAL_COMMAND",
                      "MCP_BROWSER_COMMAND",
                      "DOCKER_COMMAND",
                      "DATABASE_QUERY",
                      "HTTP_REQUEST",
                      "CUSTOM_SCRIPT",
                      "FILE_VALIDATION"
                    ]
                  },
                  "minItems": 1,
                  "uniqueItems": true
                },
                "executorConfigurations": {
                  "type": "object",
                  "description": "Configuration for each executor type",
                  "properties": {
                    "TERMINAL_COMMAND": {
                      "$ref": "#/definitions/TerminalCommandConfig"
                    },
                    "MCP_BROWSER_COMMAND": {
                      "$ref": "#/definitions/MCPBrowserConfig"
                    },
                    "DOCKER_COMMAND": {
                      "$ref": "#/definitions/DockerCommandConfig"
                    },
                    "DATABASE_QUERY": {
                      "$ref": "#/definitions/DatabaseQueryConfig"
                    },
                    "HTTP_REQUEST": {
                      "$ref": "#/definitions/HTTPRequestConfig"
                    },
                    "CUSTOM_SCRIPT": {
                      "$ref": "#/definitions/CustomScriptConfig"
                    },
                    "FILE_VALIDATION": {
                      "$ref": "#/definitions/FileValidationConfig"
                    }
                  }
                }
              }
            },
            "tasks": {
              "type": "object",
              "description": "Test tasks indexed by task ID",
              "patternProperties": {
                "^T[0-9]{3,}$": {
                  "$ref": "#/definitions/TestTask"
                }
              },
              "minProperties": 1,
              "additionalProperties": false
            },
            "technicalDebtConfiguration": {
              "type": "object",
              "description": "Configuration for technical debt generation from test failures",
              "required": [
                "enabled",
                "routingStrategy"
              ],
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "default": true,
                  "description": "Enable automatic technical debt generation from test failures"
                },
                "routingStrategy": {
                  "type": "string",
                  "enum": [
                    "CAPACITY_BASED",
                    "SEVERITY_BASED",
                    "MANUAL"
                  ],
                  "default": "CAPACITY_BASED",
                  "description": "Strategy for routing debt to sprint tasks or inventory"
                },
                "capacityThresholds": {
                  "type": "object",
                  "description": "Capacity thresholds for CAPACITY_BASED routing",
                  "properties": {
                    "sprintTasksMaxItems": {
                      "type": "integer",
                      "default": 6,
                      "minimum": 1,
                      "description": "Maximum number of tasks in sprint before routing to inventory"
                    },
                    "sprintTasksMaxCritical": {
                      "type": "integer",
                      "default": 4,
                      "minimum": 1,
                      "description": "Maximum number of CRITICAL items in sprint"
                    }
                  }
                },
                "severityLevels": {
                  "type": "array",
                  "default": [
                    "CRITICAL",
                    "HIGH",
                    "MEDIUM",
                    "LOW"
                  ],
                  "items": {
                    "type": "string",
                    "enum": [
                      "CRITICAL",
                      "HIGH",
                      "MEDIUM",
                      "LOW"
                    ]
                  }
                }
              }
            }
          },
          "definitions": {
            "TestTask": {
              "type": "object",
              "required": [
                "taskId",
                "title",
                "description",
                "testExecution",
                "validationCriteria",
                "completionCriteria"
              ],
              "properties": {
                "taskId": {
                  "type": "string",
                  "pattern": "^T[0-9]{3,}$",
                  "description": "Unique task identifier (e.g., T001, T042)"
                },
                "title": {
                  "type": "string",
                  "minLength": 10,
                  "maxLength": 200,
                  "description": "Clear, concise task title describing what is being tested"
                },
                "description": {
                  "type": "string",
                  "minLength": 50,
                  "description": "Detailed description of what this task validates and why"
                },
                "priority": {
                  "type": "string",
                  "enum": [
                    "CRITICAL",
                    "HIGH",
                    "MEDIUM",
                    "LOW"
                  ],
                  "default": "MEDIUM",
                  "description": "Task priority level"
                },
                "dependencies": {
                  "type": "array",
                  "description": "Task IDs that must complete before this task can run",
                  "items": {
                    "type": "string",
                    "pattern": "^T[0-9]{3,}$"
                  },
                  "uniqueItems": true
                },
                "testExecution": {
                  "$ref": "#/definitions/TestExecution"
                },
                "mcpValidation": {
                  "$ref": "#/definitions/MCPValidation"
                },
                "validationCriteria": {
                  "$ref": "#/definitions/ValidationCriteria"
                },
                "technicalDebtExpectations": {
                  "$ref": "#/definitions/TechnicalDebtExpectations"
                },
                "completionCriteria": {
                  "$ref": "#/definitions/CompletionCriteria"
                },
                "executionWorkflow": {
                  "$ref": "#/definitions/ExecutionWorkflow"
                }
              }
            },
            "TestExecution": {
              "type": "object",
              "required": [
                "steps"
              ],
              "properties": {
                "prerequisites": {
                  "type": "array",
                  "description": "Actions that must be completed before test execution",
                  "items": {
                    "$ref": "#/definitions/TestAction"
                  }
                },
                "steps": {
                  "type": "array",
                  "description": "Main test execution steps (in order)",
                  "items": {
                    "$ref": "#/definitions/TestAction"
                  },
                  "minItems": 1
                },
                "cleanup": {
                  "type": "array",
                  "description": "Cleanup actions to run after test execution",
                  "items": {
                    "$ref": "#/definitions/TestAction"
                  }
                }
              }
            },
            "TestAction": {
              "type": "object",
              "required": [
                "actionId",
                "type",
                "description",
                "parameters"
              ],
              "properties": {
                "actionId": {
                  "type": "string",
                  "pattern": "^[A-Z][A-Z0-9_]*\\.[0-9]+$",
                  "description": "Unique action identifier (e.g., T001.1, T001.2)"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "TERMINAL_COMMAND",
                    "MCP_BROWSER_COMMAND",
                    "DOCKER_COMMAND",
                    "DATABASE_QUERY",
                    "HTTP_REQUEST",
                    "CUSTOM_SCRIPT",
                    "FILE_VALIDATION"
                  ],
                  "description": "Type of action to execute"
                },
                "description": {
                  "type": "string",
                  "minLength": 10,
                  "description": "Clear description of what this action does"
                },
                "parameters": {
                  "type": "object",
                  "description": "Action-specific parameters (validated by action type schema)",
                  "minProperties": 1
                },
                "evidenceCapture": {
                  "type": "object",
                  "description": "What evidence to capture for this action",
                  "properties": {
                    "stdout": {
                      "type": "boolean",
                      "default": true
                    },
                    "stderr": {
                      "type": "boolean",
                      "default": true
                    },
                    "exitCode": {
                      "type": "boolean",
                      "default": true
                    },
                    "duration": {
                      "type": "boolean",
                      "default": true
                    },
                    "screenshots": {
                      "type": "boolean",
                      "default": false
                    },
                    "domSnapshot": {
                      "type": "boolean",
                      "default": false
                    },
                    "requestResponse": {
                      "type": "boolean",
                      "default": false
                    },
                    "fileContents": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                },
                "timeout": {
                  "type": "integer",
                  "minimum": 1000,
                  "maximum": 600000,
                  "description": "Action timeout in milliseconds"
                },
                "retryAttempts": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 5,
                  "default": 0,
                  "description": "Number of retry attempts on failure"
                },
                "continueOnFailure": {
                  "type": "boolean",
                  "default": false,
                  "description": "Continue execution even if this action fails"
                }
              },
              "allOf": [
                {
                  "if": {
                    "properties": {
                      "type": {
                        "const": "TERMINAL_COMMAND"
                      }
                    }
                  },
                  "then": {
                    "properties": {
                      "parameters": {
                        "$ref": "#/definitions/TerminalCommandParameters"
                      }
                    }
                  }
                },
                {
                  "if": {
                    "properties": {
                      "type": {
                        "const": "MCP_BROWSER_COMMAND"
                      }
                    }
                  },
                  "then": {
                    "properties": {
                      "parameters": {
                        "$ref": "#/definitions/MCPBrowserParameters"
                      }
                    }
                  }
                },
                {
                  "if": {
                    "properties": {
                      "type": {
                        "const": "HTTP_REQUEST"
                      }
                    }
                  },
                  "then": {
                    "properties": {
                      "parameters": {
                        "$ref": "#/definitions/HTTPRequestParameters"
                      }
                    }
                  }
                },
                {
                  "if": {
                    "properties": {
                      "type": {
                        "const": "DOCKER_COMMAND"
                      }
                    }
                  },
                  "then": {
                    "properties": {
                      "parameters": {
                        "$ref": "#/definitions/DockerCommandParameters"
                      }
                    }
                  }
                },
                {
                  "if": {
                    "properties": {
                      "type": {
                        "const": "DATABASE_QUERY"
                      }
                    }
                  },
                  "then": {
                    "properties": {
                      "parameters": {
                        "$ref": "#/definitions/DatabaseQueryParameters"
                      }
                    }
                  }
                },
                {
                  "if": {
                    "properties": {
                      "type": {
                        "const": "CUSTOM_SCRIPT"
                      }
                    }
                  },
                  "then": {
                    "properties": {
                      "parameters": {
                        "$ref": "#/definitions/CustomScriptParameters"
                      }
                    }
                  }
                },
                {
                  "if": {
                    "properties": {
                      "type": {
                        "const": "FILE_VALIDATION"
                      }
                    }
                  },
                  "then": {
                    "properties": {
                      "parameters": {
                        "$ref": "#/definitions/FileValidationParameters"
                      }
                    }
                  }
                }
              ]
            },
            "TerminalCommandParameters": {
              "type": "object",
              "required": [
                "command",
                "workingDirectory"
              ],
              "properties": {
                "command": {
                  "type": "string",
                  "minLength": 1,
                  "description": "Exact command to execute (e.g., 'npm test -- path/to/test.ts')"
                },
                "workingDirectory": {
                  "type": "string",
                  "description": "Absolute path where command should execute"
                },
                "environment": {
                  "type": "object",
                  "description": "Environment variables for this command",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "expectedExitCodes": {
                  "type": "array",
                  "description": "Exit codes considered successful",
                  "items": {
                    "type": "integer"
                  },
                  "default": [
                    0
                  ]
                },
                "shell": {
                  "type": "string",
                  "enum": [
                    "powershell",
                    "bash",
                    "cmd",
                    "sh"
                  ],
                  "description": "Shell to use for command execution"
                }
              }
            },
            "MCPBrowserParameters": {
              "type": "object",
              "required": [
                "action"
              ],
              "properties": {
                "action": {
                  "type": "string",
                  "enum": [
                    "browser_navigate",
                    "browser_click",
                    "browser_fill_form",
                    "browser_evaluate",
                    "browser_screenshot",
                    "browser_wait_for_selector",
                    "browser_get_content"
                  ],
                  "description": "MCP browser action to perform"
                },
                "url": {
                  "type": "string",
                  "format": "uri",
                  "description": "URL for navigation actions"
                },
                "selector": {
                  "type": "string",
                  "description": "CSS selector for element actions"
                },
                "script": {
                  "type": "string",
                  "description": "JavaScript to evaluate in browser context"
                },
                "formData": {
                  "type": "object",
                  "description": "Form data for fill_form actions",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "waitTimeout": {
                  "type": "integer",
                  "minimum": 1000,
                  "maximum": 30000,
                  "default": 5000,
                  "description": "Wait timeout in milliseconds"
                }
              }
            },
            "HTTPRequestParameters": {
              "type": "object",
              "required": [
                "url",
                "method"
              ],
              "properties": {
                "url": {
                  "type": "string",
                  "format": "uri",
                  "description": "Full URL for the HTTP request"
                },
                "method": {
                  "type": "string",
                  "enum": [
                    "GET",
                    "POST",
                    "PUT",
                    "PATCH",
                    "DELETE",
                    "HEAD",
                    "OPTIONS"
                  ],
                  "description": "HTTP method"
                },
                "headers": {
                  "type": "object",
                  "description": "HTTP headers",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "body": {
                  "description": "Request body (object for JSON, string for others)",
                  "oneOf": [
                    {
                      "type": "object"
                    },
                    {
                      "type": "string"
                    }
                  ]
                },
                "expectedStatus": {
                  "type": "integer",
                  "minimum": 100,
                  "maximum": 599,
                  "description": "Expected HTTP status code"
                },
                "validateResponse": {
                  "type": "object",
                  "description": "Response validation rules",
                  "properties": {
                    "jsonSchema": {
                      "type": "object",
                      "description": "JSON schema to validate response body"
                    },
                    "containsText": {
                      "type": "string",
                      "description": "Text that must appear in response body"
                    },
                    "matchesRegex": {
                      "type": "string",
                      "description": "Regex pattern that response must match"
                    }
                  }
                }
              }
            },
            "DockerCommandParameters": {
              "type": "object",
              "required": [
                "dockerCommand"
              ],
              "properties": {
                "dockerCommand": {
                  "type": "string",
                  "enum": [
                    "run",
                    "exec",
                    "build",
                    "compose",
                    "ps",
                    "logs",
                    "inspect"
                  ],
                  "description": "Docker command to execute"
                },
                "containerOrImage": {
                  "type": "string",
                  "description": "Container ID/name or image name"
                },
                "volumes": {
                  "type": "array",
                  "description": "Volume mounts (e.g., '/host/path:/container/path')",
                  "items": {
                    "type": "string"
                  }
                },
                "ports": {
                  "type": "array",
                  "description": "Port mappings (e.g., '8080:80')",
                  "items": {
                    "type": "string"
                  }
                },
                "environment": {
                  "type": "object",
                  "description": "Environment variables for container",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "command": {
                  "type": "string",
                  "description": "Command to run inside container"
                },
                "detached": {
                  "type": "boolean",
                  "default": false,
                  "description": "Run container in detached mode"
                }
              }
            },
            "DatabaseQueryParameters": {
              "type": "object",
              "required": [
                "connectionString",
                "query"
              ],
              "properties": {
                "connectionString": {
                  "type": "string",
                  "description": "Database connection string (use environment variable references for credentials)"
                },
                "query": {
                  "type": "string",
                  "minLength": 1,
                  "description": "SQL or NoSQL query to execute"
                },
                "queryType": {
                  "type": "string",
                  "enum": [
                    "SELECT",
                    "INSERT",
                    "UPDATE",
                    "DELETE",
                    "DDL",
                    "PROCEDURE"
                  ],
                  "description": "Type of query being executed"
                },
                "expectedRowCount": {
                  "type": "integer",
                  "minimum": 0,
                  "description": "Expected number of rows returned/affected"
                },
                "validateResults": {
                  "type": "object",
                  "description": "Result validation rules",
                  "properties": {
                    "rowSchema": {
                      "type": "object",
                      "description": "JSON schema for validating row structure"
                    },
                    "containsValues": {
                      "type": "object",
                      "description": "Values that must appear in results"
                    }
                  }
                }
              }
            },
            "CustomScriptParameters": {
              "type": "object",
              "required": [
                "scriptPath",
                "interpreter"
              ],
              "properties": {
                "scriptPath": {
                  "type": "string",
                  "description": "Absolute path to script file"
                },
                "interpreter": {
                  "type": "string",
                  "enum": [
                    "node",
                    "python",
                    "python3",
                    "bash",
                    "sh",
                    "powershell",
                    "ruby",
                    "perl"
                  ],
                  "description": "Script interpreter to use"
                },
                "arguments": {
                  "type": "array",
                  "description": "Arguments to pass to script",
                  "items": {
                    "type": "string"
                  }
                },
                "environment": {
                  "type": "object",
                  "description": "Environment variables for script execution",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "FileValidationParameters": {
              "type": "object",
              "required": [
                "filePath",
                "validationType"
              ],
              "properties": {
                "filePath": {
                  "type": "string",
                  "description": "Absolute path to file to validate"
                },
                "validationType": {
                  "type": "string",
                  "enum": [
                    "EXISTS",
                    "CONTENT_MATCH",
                    "SCHEMA_VALID",
                    "HASH_MATCH",
                    "SIZE_CHECK"
                  ],
                  "description": "Type of validation to perform"
                },
                "expectedContent": {
                  "type": "string",
                  "description": "Expected file content (for CONTENT_MATCH)"
                },
                "contentRegex": {
                  "type": "string",
                  "description": "Regex pattern file content must match"
                },
                "schema": {
                  "type": "object",
                  "description": "JSON schema for validating file content (for SCHEMA_VALID)"
                },
                "expectedHash": {
                  "type": "string",
                  "description": "Expected SHA-256 hash (for HASH_MATCH)"
                },
                "minSize": {
                  "type": "integer",
                  "description": "Minimum file size in bytes"
                },
                "maxSize": {
                  "type": "integer",
                  "description": "Maximum file size in bytes"
                }
              }
            },
            "MCPValidation": {
              "type": "object",
              "description": "Browser-based validation steps using MCP",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "default": false,
                  "description": "Enable MCP browser validation"
                },
                "steps": {
                  "type": "array",
                  "description": "Sequential MCP validation steps",
                  "items": {
                    "$ref": "#/definitions/TestAction"
                  }
                }
              }
            },
            "ValidationCriteria": {
              "type": "object",
              "required": [
                "successConditions"
              ],
              "properties": {
                "successConditions": {
                  "type": "array",
                  "description": "Conditions that must be met for test to pass",
                  "items": {
                    "type": "object",
                    "required": [
                      "condition",
                      "description"
                    ],
                    "properties": {
                      "condition": {
                        "type": "string",
                        "description": "Condition expression (e.g., 'exitCode === 0', 'stdout.includes(\"passed\")')"
                      },
                      "description": {
                        "type": "string",
                        "description": "Human-readable description of what this condition validates"
                      }
                    }
                  },
                  "minItems": 1
                },
                "failureConditions": {
                  "type": "array",
                  "description": "Conditions that indicate test failure",
                  "items": {
                    "type": "object",
                    "required": [
                      "condition",
                      "description"
                    ],
                    "properties": {
                      "condition": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      }
                    }
                  }
                },
                "expectedOutput": {
                  "type": "object",
                  "description": "Expected output patterns",
                  "properties": {
                    "stdoutContains": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "stderrEmpty": {
                      "type": "boolean"
                    },
                    "exitCode": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "TechnicalDebtExpectations": {
              "type": "object",
              "description": "Expected technical debt items if tests fail",
              "properties": {
                "likelyFailures": {
                  "type": "array",
                  "description": "Likely failure scenarios and their causes",
                  "items": {
                    "type": "object",
                    "required": [
                      "scenario",
                      "expectedDebtCategory",
                      "expectedSeverity"
                    ],
                    "properties": {
                      "scenario": {
                        "type": "string",
                        "description": "Description of failure scenario"
                      },
                      "expectedDebtCategory": {
                        "type": "string",
                        "enum": [
                          "API_ENDPOINT_MISSING",
                          "VALIDATION_MISSING",
                          "ERROR_HANDLING_MISSING",
                          "BUSINESS_LOGIC_ERROR",
                          "DATABASE_SCHEMA_ISSUE",
                          "INTEGRATION_FAILURE",
                          "PERFORMANCE_ISSUE",
                          "SECURITY_VULNERABILITY"
                        ]
                      },
                      "expectedSeverity": {
                        "type": "string",
                        "enum": [
                          "CRITICAL",
                          "HIGH",
                          "MEDIUM",
                          "LOW"
                        ]
                      },
                      "suggestedFix": {
                        "type": "string",
                        "description": "Suggested approach to fix this issue"
                      }
                    }
                  }
                }
              }
            },
            "CompletionCriteria": {
              "type": "object",
              "required": [
                "allStepsMustPass"
              ],
              "properties": {
                "allStepsMustPass": {
                  "type": "boolean",
                  "description": "All test steps must pass for task completion"
                },
                "minimumPassRate": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 100,
                  "description": "Minimum percentage of steps that must pass (if allStepsMustPass is false)"
                },
                "requiredEvidence": {
                  "type": "array",
                  "description": "Evidence files that must be generated",
                  "items": {
                    "type": "string",
                    "enum": [
                      "test-execution-log",
                      "terminal-output",
                      "screenshots",
                      "api-responses",
                      "error-logs",
                      "performance-metrics"
                    ]
                  }
                },
                "taskStatusLock": {
                  "type": "boolean",
                  "default": true,
                  "description": "Task status is locked by script and cannot be modified by agent"
                }
              }
            },
            "ExecutionWorkflow": {
              "type": "object",
              "description": "Complete execution workflow with dependencies",
              "properties": {
                "prerequisites": {
                  "type": "array",
                  "description": "Prerequisites that must be satisfied before execution",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "description"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "DEV_SERVER_RUNNING",
                          "DATABASE_AVAILABLE",
                          "SERVICE_HEALTHY",
                          "FILE_EXISTS"
                        ]
                      },
                      "description": {
                        "type": "string"
                      },
                      "checkCommand": {
                        "type": "string",
                        "description": "Command to verify prerequisite is met"
                      }
                    }
                  }
                },
                "executionOrder": {
                  "type": "array",
                  "description": "Ordered list of action IDs to execute",
                  "items": {
                    "type": "string",
                    "pattern": "^[A-Z][A-Z0-9_]*\\.[0-9]+$"
                  }
                },
                "parallelExecution": {
                  "type": "boolean",
                  "default": false,
                  "description": "Allow parallel execution of independent actions"
                }
              }
            },
            "TerminalCommandConfig": {
              "type": "object",
              "properties": {
                "defaultShell": {
                  "type": "string",
                  "enum": [
                    "powershell",
                    "bash",
                    "cmd",
                    "sh"
                  ]
                },
                "defaultTimeout": {
                  "type": "integer",
                  "default": 30000
                }
              }
            },
            "MCPBrowserConfig": {
              "type": "object",
              "properties": {
                "mcpServerCommand": {
                  "type": "string",
                  "default": "npx -y @modelcontextprotocol/server-brave-search"
                },
                "browserType": {
                  "type": "string",
                  "enum": [
                    "chromium",
                    "firefox",
                    "webkit"
                  ],
                  "default": "chromium"
                },
                "headless": {
                  "type": "boolean",
                  "default": true
                }
              }
            },
            "DockerCommandConfig": {
              "type": "object",
              "properties": {
                "dockerHost": {
                  "type": "string",
                  "description": "Docker daemon host"
                },
                "registryAuth": {
                  "type": "object",
                  "description": "Registry authentication credentials"
                }
              }
            },
            "DatabaseQueryConfig": {
              "type": "object",
              "properties": {
                "connectionTimeout": {
                  "type": "integer",
                  "default": 5000
                },
                "queryTimeout": {
                  "type": "integer",
                  "default": 30000
                }
              }
            },
            "HTTPRequestConfig": {
              "type": "object",
              "properties": {
                "defaultTimeout": {
                  "type": "integer",
                  "default": 10000
                },
                "followRedirects": {
                  "type": "boolean",
                  "default": true
                },
                "validateSSL": {
                  "type": "boolean",
                  "default": true
                }
              }
            },
            "CustomScriptConfig": {
              "type": "object",
              "properties": {
                "allowedInterpreters": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "node",
                      "python",
                      "python3",
                      "bash",
                      "sh",
                      "powershell",
                      "ruby",
                      "perl"
                    ]
                  }
                },
                "scriptDirectory": {
                  "type": "string",
                  "description": "Directory where custom scripts are located"
                }
              }
            },
            "FileValidationConfig": {
              "type": "object",
              "properties": {
                "allowedDirectories": {
                  "type": "array",
                  "description": "Directories where file validation is permitted",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "LintToolPolicy": {
              "type": "object",
              "description": "Policy configuration for a linting tool",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "default": true,
                  "description": "Whether this linting tool is enabled"
                },
                "blockOn": {
                  "type": "string",
                  "enum": [
                    "ERRORS_ALWAYS",
                    "ERRORS_ONLY",
                    "ERRORS_AND_WARNINGS",
                    "WARN_ONLY",
                    "NEVER"
                  ],
                  "default": "ERRORS_ONLY",
                  "description": "When to block execution based on linting results"
                },
                "treatWarningsAsErrors": {
                  "type": "boolean",
                  "default": false,
                  "description": "Treat all warnings as errors (equivalent to ERRORS_AND_WARNINGS)"
                },
                "maxWarnings": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "default": null,
                  "minimum": 0,
                  "description": "Maximum number of warnings allowed before blocking (null = unlimited)"
                },
                "ignoredRules": {
                  "type": "array",
                  "description": "List of rule IDs to ignore",
                  "items": {
                    "type": "string"
                  }
                },
                "errorOnRules": {
                  "type": "array",
                  "description": "List of rule IDs that should always be treated as errors",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "TypeCheckToolPolicy": {
              "type": "object",
              "description": "Policy configuration for a type checking tool",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "default": true,
                  "description": "Whether this type checking tool is enabled"
                },
                "blockOn": {
                  "type": "string",
                  "enum": [
                    "ERRORS_ALWAYS",
                    "ERRORS_ONLY",
                    "WARN_ONLY",
                    "NEVER"
                  ],
                  "default": "ERRORS_ALWAYS",
                  "description": "When to block execution based on type checking results"
                },
                "strictMode": {
                  "type": "boolean",
                  "default": true,
                  "description": "Enable strict type checking mode"
                },
                "allowImplicitAny": {
                  "type": "boolean",
                  "default": false,
                  "description": "Allow implicit any types (TypeScript-specific)"
                }
              }
            }
          }
        },
        "isValidJSON": true
      },
      "error": null,
      "endTime": "2025-09-30T12:30:20.561Z",
      "durationMs": 1
    },
    {
      "action": {
        "actionId": "STEP.5",
        "description": "Display T004 summary",
        "type": "TERMINAL_COMMAND",
        "parameters": {
          "command": "Write-Host '✅ T004 infrastructure validated!' -ForegroundColor Green; Write-Host 'Ready for full contract test execution' -ForegroundColor Cyan"
        }
      },
      "phase": "STEP",
      "taskId": "T004-validation",
      "startTime": "2025-09-30T12:30:20.561Z",
      "success": true,
      "data": {
        "command": "Write-Host '✅ T004 infrastructure validated!' -ForegroundColor Green; Write-Host 'Ready for full contract test execution' -ForegroundColor Cyan",
        "workingDirectory": "D:/Dropbox/Repositories/Python/codor",
        "exitCode": 0,
        "stdout": "? T004 infrastructure validated!\nReady for full contract test execution\n",
        "stderr": "",
        "expectedExitCodes": [
          0
        ],
        "timestamp": "2025-09-30T12:30:20.885Z"
      },
      "error": null,
      "endTime": "2025-09-30T12:30:20.885Z",
      "durationMs": 324
    }
  ],
  "status": "PASSED",
  "validationResult": {
    "passed": true,
    "successConditions": [],
    "failureConditions": [],
    "evaluations": [
      {
        "condition": "PREREQ['1'].success === true",
        "description": "test-case directory exists",
        "passed": true
      },
      {
        "condition": "PREREQ['2'].success === true",
        "description": "packages/web directory exists",
        "passed": true
      },
      {
        "condition": "PREREQ['3'].success === true && PREREQ['3'].isValidJSON === true",
        "description": "package.json is valid",
        "passed": true
      },
      {
        "condition": "STEP['1'].success === true && STEP['1'].exitCode === 0",
        "description": "Can check node_modules",
        "passed": true
      },
      {
        "condition": "STEP['2'].success === true && STEP['2'].isValidJSON === true",
        "description": "T004 specification is valid JSON",
        "passed": true
      },
      {
        "condition": "STEP['3'].success === true && STEP['3'].exitCode === 0",
        "description": "Can count test specifications",
        "passed": true
      },
      {
        "condition": "STEP['4'].success === true && STEP['4'].isValidJSON === true",
        "description": "Schema file is valid JSON",
        "passed": true
      },
      {
        "condition": "STEP['5'].success === true",
        "description": "Summary displayed",
        "passed": true
      }
    ]
  },
  "endTime": "2025-09-30T12:30:20.890Z",
  "durationMs": 954
}