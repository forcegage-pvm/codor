{
  "actionId": "STEP.2",
  "taskId": "T004-validation",
  "timestamp": "2025-09-30T12:30:20.242Z",
  "action": {
    "type": "FILE_VALIDATION",
    "description": "Verify T004 specification exists"
  },
  "result": {
    "success": true,
    "durationMs": 1,
    "data": {
      "filePath": "D:\\Dropbox\\Repositories\\Python\\codor\\docs\\specifications\\testing-system\\examples\\T004-quotes-get-test-specification.json",
      "validationType": "JSON_VALID",
      "exists": true,
      "timestamp": "2025-09-30T12:30:20.243Z",
      "size": 13339,
      "modified": "2025-09-30T08:49:22.086Z",
      "isDirectory": false,
      "json": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "schemaVersion": "2.0.0",
        "metadata": {
          "projectName": "CODOR-QuotesWorkspace",
          "sprintId": "SPRINT_006",
          "taskId": "T004",
          "taskTitle": "Contract Test GET /api/quotes",
          "generatedAt": "2025-09-30T16:00:00.000Z",
          "generatedBy": "GitHub Copilot",
          "description": "Comprehensive test specification for T004: Contract test GET /api/quotes endpoint with TDD validation and MCP browser verification",
          "references": {
            "taskPlan": "test-case/specs/006-quotes-technical-debt/tasks.md#T004",
            "testPlan": "test-case/specs/006-quotes-technical-debt/task-test-plan.md#T004",
            "apiContract": "test-case/specs/006-quotes-technical-debt/contracts/api-contracts.md#get-quote-list"
          }
        },
        "globalConfiguration": {
          "workspaceRoot": "D:/Dropbox/Repositories/Python/codor/test-case",
          "evidenceDirectory": "evidence",
          "devServer": {
            "command": "npm run dev",
            "workingDirectory": "D:/Dropbox/Repositories/Python/codor/test-case/packages/web",
            "healthCheckUrl": "http://localhost:3000/api/health",
            "startupTimeout": 30000,
            "port": 3000
          },
          "environment": {
            "NODE_ENV": "test",
            "API_BASE_URL": "http://localhost:3000",
            "LOG_LEVEL": "info"
          },
          "timeout": 300000,
          "validationPolicy": {
            "linting": {
              "strategy": "BLOCK_ON_ERRORS_ONLY",
              "tools": {
                "eslint": {
                  "enabled": true,
                  "blockOn": "ERRORS_ONLY",
                  "treatWarningsAsErrors": false,
                  "maxWarnings": 20,
                  "ignoredRules": [
                    "no-console"
                  ],
                  "errorOnRules": [
                    "no-unused-vars",
                    "@typescript-eslint/no-unused-vars"
                  ]
                }
              }
            },
            "typeChecking": {
              "strategy": "BLOCK_ON_ERRORS_ALWAYS",
              "tools": {
                "typescript": {
                  "enabled": true,
                  "blockOn": "ERRORS_ALWAYS",
                  "strictMode": true,
                  "allowImplicitAny": false
                }
              }
            },
            "compilation": {
              "strategy": "BLOCK_ON_ERRORS_ALWAYS"
            }
          }
        },
        "executionEngine": {
          "availableActionTypes": [
            "TERMINAL_COMMAND",
            "HTTP_REQUEST",
            "FILE_VALIDATION"
          ],
          "executorConfigurations": {
            "TERMINAL_COMMAND": {
              "defaultShell": "powershell",
              "defaultTimeout": 60000
            },
            "HTTP_REQUEST": {
              "defaultTimeout": 10000,
              "followRedirects": true,
              "validateSSL": true
            }
          }
        },
        "tasks": {
          "T004": {
            "taskId": "T004",
            "title": "Contract Test GET /api/quotes",
            "description": "Execute contract tests for GET /api/quotes endpoint and validate API responses. This task validates the quote list endpoint implementation against the API contract specification, including response structure, pagination, filtering, and error handling. Expected to be in TDD red phase initially.",
            "priority": "HIGH",
            "dependencies": [],
            "testExecution": {
              "prerequisites": [
                {
                  "actionId": "PREREQ.1",
                  "type": "FILE_VALIDATION",
                  "description": "Verify contract test file exists",
                  "parameters": {
                    "filePath": "packages/web/__tests__/contracts/quotes-get.test.ts",
                    "validationType": "EXISTS"
                  },
                  "timeout": 5000,
                  "continueOnFailure": false
                },
                {
                  "actionId": "PREREQ.2",
                  "type": "TERMINAL_COMMAND",
                  "description": "Install dependencies",
                  "parameters": {
                    "command": "npm install",
                    "workingDirectory": "D:/Dropbox/Repositories/Python/codor/test-case/packages/web",
                    "environment": {
                      "NODE_ENV": "test"
                    }
                  },
                  "timeout": 120000,
                  "continueOnFailure": false
                },
                {
                  "actionId": "PREREQ.3",
                  "type": "TERMINAL_COMMAND",
                  "description": "Start Next.js dev server",
                  "parameters": {
                    "command": "npm run dev",
                    "workingDirectory": "D:/Dropbox/Repositories/Python/codor/test-case/packages/web",
                    "environment": {
                      "NODE_ENV": "development",
                      "PORT": "3000"
                    }
                  },
                  "timeout": 30000,
                  "continueOnFailure": false
                }
              ],
              "steps": [
                {
                  "actionId": "STEP.1",
                  "type": "FILE_VALIDATION",
                  "description": "Verify TypeScript types are valid",
                  "parameters": {
                    "filePath": "packages/web/__tests__/contracts/quotes-get.test.ts",
                    "validationType": "CONTENT_MATCH"
                  },
                  "timeout": 5000,
                  "continueOnFailure": false
                },
                {
                  "actionId": "STEP.2",
                  "type": "TERMINAL_COMMAND",
                  "description": "TypeScript type check",
                  "parameters": {
                    "command": "npx tsc --noEmit --project tsconfig.json",
                    "workingDirectory": "D:/Dropbox/Repositories/Python/codor/test-case/packages/web"
                  },
                  "timeout": 60000,
                  "continueOnFailure": false
                },
                {
                  "actionId": "STEP.3",
                  "type": "TERMINAL_COMMAND",
                  "description": "ESLint validation",
                  "parameters": {
                    "command": "npx eslint __tests__/contracts/quotes-get.test.ts",
                    "workingDirectory": "D:/Dropbox/Repositories/Python/codor/test-case/packages/web"
                  },
                  "timeout": 30000,
                  "continueOnFailure": false
                },
                {
                  "actionId": "STEP.4",
                  "type": "TERMINAL_COMMAND",
                  "description": "Execute contract test suite (T004.1)",
                  "parameters": {
                    "command": "npm test -- __tests__/contracts/quotes-get.test.ts --verbose",
                    "workingDirectory": "D:/Dropbox/Repositories/Python/codor/test-case/packages/web",
                    "environment": {
                      "NODE_ENV": "test",
                      "API_URL": "http://localhost:3000"
                    }
                  },
                  "timeout": 60000,
                  "continueOnFailure": true
                },
                {
                  "actionId": "STEP.5",
                  "type": "HTTP_REQUEST",
                  "description": "Direct API validation: GET /api/v1/quotes",
                  "parameters": {
                    "url": "http://localhost:3000/api/v1/quotes",
                    "method": "GET",
                    "headers": {
                      "Accept": "application/json"
                    }
                  },
                  "timeout": 10000,
                  "continueOnFailure": true
                },
                {
                  "actionId": "STEP.6",
                  "type": "HTTP_REQUEST",
                  "description": "Test API pagination parameters",
                  "parameters": {
                    "url": "http://localhost:3000/api/v1/quotes?page=1&pageSize=10",
                    "method": "GET",
                    "headers": {
                      "Accept": "application/json"
                    }
                  },
                  "timeout": 10000,
                  "continueOnFailure": true
                },
                {
                  "actionId": "STEP.7",
                  "type": "HTTP_REQUEST",
                  "description": "Test API with invalid parameters",
                  "parameters": {
                    "url": "http://localhost:3000/api/v1/quotes?page=-1&pageSize=9999",
                    "method": "GET",
                    "headers": {
                      "Accept": "application/json"
                    }
                  },
                  "timeout": 10000,
                  "continueOnFailure": true
                },
                {
                  "actionId": "STEP.8",
                  "type": "HTTP_REQUEST",
                  "description": "Test API filters",
                  "parameters": {
                    "url": "http://localhost:3000/api/v1/quotes?filters[status]=DRAFT",
                    "method": "GET",
                    "headers": {
                      "Accept": "application/json"
                    }
                  },
                  "timeout": 10000,
                  "continueOnFailure": true
                },
                {
                  "actionId": "STEP.9",
                  "type": "HTTP_REQUEST",
                  "description": "Test API sorting",
                  "parameters": {
                    "url": "http://localhost:3000/api/v1/quotes?sortBy=createdAt&sortDirection=desc",
                    "method": "GET",
                    "headers": {
                      "Accept": "application/json"
                    }
                  },
                  "timeout": 10000,
                  "continueOnFailure": true
                },
                {
                  "actionId": "STEP.10",
                  "type": "TERMINAL_COMMAND",
                  "description": "Generate test coverage report",
                  "parameters": {
                    "command": "npm test -- __tests__/contracts/quotes-get.test.ts --coverage --coverageReporters=json",
                    "workingDirectory": "D:/Dropbox/Repositories/Python/codor/test-case/packages/web"
                  },
                  "timeout": 60000,
                  "continueOnFailure": true
                }
              ],
              "cleanup": [
                {
                  "actionId": "CLEANUP.1",
                  "type": "TERMINAL_COMMAND",
                  "description": "Stop dev server",
                  "parameters": {
                    "command": "taskkill /F /FI \"WINDOWTITLE eq npm*\" /T",
                    "workingDirectory": "D:/Dropbox/Repositories/Python/codor/test-case/packages/web"
                  },
                  "timeout": 5000,
                  "continueOnFailure": true
                },
                {
                  "actionId": "CLEANUP.2",
                  "type": "TERMINAL_COMMAND",
                  "description": "Clear test cache",
                  "parameters": {
                    "command": "npm run test:clear-cache",
                    "workingDirectory": "D:/Dropbox/Repositories/Python/codor/test-case/packages/web"
                  },
                  "timeout": 10000,
                  "continueOnFailure": true
                }
              ]
            },
            "validationCriteria": {
              "successConditions": [
                {
                  "condition": "STEP.4.exitCode === 0 || STEP.4.exitCode === 1",
                  "description": "Test suite executes successfully (TDD allows test failures)"
                },
                {
                  "condition": "STEP.2.exitCode === 0",
                  "description": "No TypeScript compilation errors"
                },
                {
                  "condition": "STEP.3.errorCount === 0",
                  "description": "No ESLint errors (per validation policy BLOCK_ON_ERRORS_ONLY)"
                },
                {
                  "condition": "STEP.5.statusCode >= 200 && STEP.5.statusCode < 500",
                  "description": "API responds with valid HTTP status"
                }
              ],
              "failureConditions": [
                {
                  "condition": "PREREQ.3.failed === true",
                  "description": "Dev server failed to start (blocks execution)"
                },
                {
                  "condition": "STEP.2.exitCode !== 0",
                  "description": "TypeScript errors present (blocks execution per BLOCK_ON_ERRORS_ALWAYS)"
                }
              ],
              "expectedOutput": {
                "stdoutContains": [
                  "Test Suites:",
                  "Tests:",
                  "quotes-get.test.ts"
                ],
                "exitCode": 0
              }
            },
            "completionCriteria": {
              "allStepsMustPass": false,
              "minimumPassRate": 60,
              "requiredEvidence": [
                "terminal-output",
                "test-execution-log",
                "api-responses"
              ],
              "taskStatusLock": true
            },
            "technicalDebtExpectations": {
              "likelyFailures": [
                {
                  "scenario": "API endpoint not implemented (404 response)",
                  "expectedDebtCategory": "API_ENDPOINT_MISSING",
                  "expectedSeverity": "CRITICAL",
                  "suggestedFix": "Implement GET /api/v1/quotes endpoint with pagination, filtering, and sorting support"
                },
                {
                  "scenario": "Incorrect response structure (contract violation)",
                  "expectedDebtCategory": "INTEGRATION_FAILURE",
                  "expectedSeverity": "HIGH",
                  "suggestedFix": "Update API response to match contract specification with quotes array, pagination object, and appliedFilters"
                },
                {
                  "scenario": "Missing pagination support",
                  "expectedDebtCategory": "VALIDATION_MISSING",
                  "expectedSeverity": "MEDIUM",
                  "suggestedFix": "Add pagination logic to API endpoint with page, pageSize, totalCount, hasMore, and nextCursor"
                },
                {
                  "scenario": "Missing input validation",
                  "expectedDebtCategory": "VALIDATION_MISSING",
                  "expectedSeverity": "MEDIUM",
                  "suggestedFix": "Add validation for page, pageSize, filters, and sortBy parameters with appropriate error responses"
                }
              ]
            }
          }
        }
      },
      "isValidJSON": true
    },
    "error": null
  },
  "metadata": {
    "generatedBy": "CODOR Test Execution Engine v2.0",
    "platform": "win32",
    "nodeVersion": "v22.19.0",
    "pid": 13888
  }
}